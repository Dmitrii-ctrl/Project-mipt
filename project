
import logging
logging.basicConfig(
    filename='botlog',
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    filemode='a'
)
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater,
    CommandHandler,
    MessageHandler,
    CallbackContext,
    CallbackQueryHandler,
)
from aiogram import filters
import sqlite3
import pandas as pd
import matplotlib.pyplot as plt
from io import BytesIO
from dotenv import load_dotenv
import os

logger = logging.getLogger(__name__)

class ExpenseTrackerBot:
    def __init__(self):
        self.conn = sqlite3.connect('expenses.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        self._init_db()
        self.categories = [
            "üçé –ï–¥–∞", "üöï –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "üè† –ñ–∏–ª—å–µ", 
            "üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", "üëï –û–¥–µ–∂–¥–∞", "üè• –ó–¥–æ—Ä–æ–≤—å–µ"
        ]
        
    def _init_db(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î"""
        self.cursor.execute('''
        CREATE TABLE IF NOT EXISTS expenses (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            username TEXT,
            amount REAL,
            category TEXT,
            description TEXT,
            date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        self.conn.commit()

    def start(self, update: Update, context: CallbackContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        update.message.reply_markdown_v2(
            f"–ü—Ä–∏–≤–µ—Ç, {user.mention_markdown_v2()}! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É—á–∏—Ç—ã–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.\n\n"
            "*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n"
            "‚ûñ /add - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥\n"
            "üìä /stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤\n"
            "üóëÔ∏è /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é\n"
            "üõí /categories - —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"
        )

    def add_expense(self, update: Update, context: CallbackContext) -> None:
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [InlineKeyboardButton(cat, callback_data=f"add_{cat[2:]}")]
            for cat in self.categories
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=reply_markup)

    def save_expense(self, update: Update, context: CallbackContext) -> None:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞ –≤ –ë–î"""
        query = update.callback_query
        user = query.from_user
        
        data = query.data.split('_')
        if len(data) != 3:
            query.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö")
            return
            
        amount = float(data[2])
        category = data[1]
        
        cursor = self.conn.cursor()
        cursor.execute(
            "INSERT INTO expenses (user_id, username, amount, category) VALUES (?, ?, ?, ?)",
            (user.id, user.username, amount, category)
        )
        self.conn.commit()
        
        query.edit_message_text(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {amount} —Ä—É–±. –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category}")

    def show_stats(self, update: Update, context: CallbackContext) -> None:
        """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å –≥—Ä–∞—Ñ–∏–∫–æ–º"""
        user = update.effective_user
        df = pd.read_sql(
            f"SELECT category, SUM(amount) as total FROM expenses WHERE user_id = {user.id} GROUP BY category",
            self.conn
        )
        
        if df.empty:
            update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö.")
            return
        
        plt.style.use('ggplot')
        fig, ax = plt.subplots()
        ax.pie(df['total'], labels=df['category'], autopct='%1.1f%%', startangle=90)
        ax.axis('equal')
        ax.set_title("–í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        
        buf = BytesIO()
        plt.savefig(buf, format='png', dpi=100, bbox_inches='tight')
        buf.seek(0)
        plt.close()

        total = df['total'].sum()
        update.message.reply_photo(
            photo=buf,
            caption=f"üìä *–û–±—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã:* {total:.2f} —Ä—É–±.\n\n"
                    + "\n".join([f"‚ñ™Ô∏è {row['category']}: {row['total']} —Ä—É–±." for _, row in df.iterrows()]),
            parse_mode='Markdown'
        )
        buf.close()

    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        load_dotenv()
        TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
        if not TOKEN:
            raise ValueError("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å TELEGRAM_BOT_TOKEN")
        
        updater = Updater(TOKEN)
        dispatcher = updater.dispatcher

        dispatcher.add_handler(CommandHandler('start', self.start))
        dispatcher.add_handler(CommandHandler('add', self.add_expense))
        dispatcher.add_handler(CommandHandler('stats', self.show_stats))
        dispatcher.add_handler(CallbackQueryHandler(self.save_expense, pattern="^add_"))
        
        updater.start_polling()
        updater.idle()

if __name__ == '__main__':
    bot = ExpenseTrackerBot()
    bot.run()
